# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information

# Scratchpad

## Naval Battle Game Development Plan (v0.2.0)

### Project Overview
- Top-down multiplayer naval battle game
- Browser-based with real-time multiplayer functionality
- Ships can be upgraded through combat and collecting wreckage
- Realistic naval physics with momentum-based movement

### Current Task: Implement Collision Detection and Ship Damage System

#### Collision Detection Implementation Plan
[X] Phase 1: Project Setup & Basic Game Engine
[X] Phase 2: Ship Movement & Controls
[WIP] Phase 3: Combat System
[X] Phase 4: Multiplayer Integration
[ ] Phase 5: Progression System
[ ] Phase 6: Polish & Optimization

#### Collision Detection Tasks
[X] Implement basic ship-to-ship collision detection
[X] Add collision response (ships bounce/push each other)
[X] Implement damage on collision based on relative speed
[X] Add visual feedback for collisions (particle effects)
[X] Synchronize collisions across the network

#### Ship Damage System Tasks
[X] Add health property to ships
[X] Implement damage application function
[X] Create visual indicators for ship health
[X] Add smoke/fire effects for damaged ships
[X] Implement ship destruction when health reaches zero
[X] Add ship respawning after destruction
[X] Synchronize damage and destruction across the network

### Implementation Approach
1. First, add collision detection between ships using bounding box or circle collision
2. Then implement the damage system with health tracking
3. Add visual feedback for both collisions and damage
4. Finally, synchronize these new mechanics across the network

### Phase 3 Tasks (Combat System)
[ ] Implement weapon systems (cannons, torpedoes, rockets)
[ ] Add projectile physics
[X] Implement damage system
[X] Create visual effects for combat
[X] Add ship health/destruction mechanics

### Phase 2 Tasks (Ship Movement)
[X] Implement ship sprites and basic rendering
[X] Add momentum-based movement physics
[X] Implement ship steering and throttle controls
[X] Implement realistic ship controls with discrete settings
[X] Add collision detection
[X] Implement camera following player ship

### Troubleshooting
[X] Fix Content Security Policy issues
[X] Improve error handling for network connections
[X] Add connection status display
[X] Configure server for network access
[X] Fix client-server connection issues
[X] Add network test page for easier debugging
[X] Update firewall settings for local network play

### Version 0.1.0 Achievements
[X] Basic ship movement with physics
[X] Real-time multiplayer functionality
[X] Server-side game state management
[X] Connection status display
[X] Multiple ship types
[X] Improved ship visibility with player-specific colors
[X] Enhanced water background for better contrast
[X] Local network multiplayer support
[X] Realistic ship controls with throttle and rudder settings
[X] Network test page for connection debugging

### Version 0.2.0 Goals
[X] Implement collision detection
[ ] Add basic weapon systems
[X] Implement ship damage mechanics
[X] Add visual effects for combat