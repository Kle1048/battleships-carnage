[Cursor] Improve ship controls display and fix TypeScript error

This commit makes the following improvements:

1. Fixed TypeScript error:
   - Added type assertion to the addChild method call in the Ship class
   - Resolves the error: "Argument of type 'Text' is not assignable to parameter of type 'DisplayObject'"

2. Improved UI for ship controls:
   - Moved ship controls display from individual ships to the top of the screen
   - Created a dedicated UI container that stays fixed on screen
   - Added separate text elements for:
     - Connection status (left side)
     - Ship controls reference (right side)
     - Current throttle and rudder settings (center)
   - Improved text styling with drop shadows and better contrast
   - Used nautical terminology for throttle and rudder settings

3. Removed redundant status text from ships
   - Simplified ship rendering
   - Improved performance by reducing text objects

These changes make the game more user-friendly and provide clearer feedback about the current ship controls.

[Cursor] Implement realistic ship controls with discrete throttle and rudder settings

This commit adds more realistic ship controls to the game:

- Added discrete throttle settings: Flank, Half, Slow, Stop, Reverse Half, Reverse Full
- Added discrete rudder settings: Full Left, Half Left, Ahead, Half Right, Full Right
- Implemented more realistic ship physics:
  - Gradual acceleration and deceleration
  - Turning effectiveness based on speed
  - Reduced turning ability in reverse
  - Slight drift when turning at speed
- Added visual feedback showing current throttle and rudder settings
- Updated input handling to support key press events
- Added multiple control options:
  - W/S: Increase/decrease throttle
  - A/D: Turn rudder left/right
  - 1-6: Direct throttle settings
  - Q/E/R: Direct rudder settings
  - Space: Center rudder
- Updated documentation in README.md 

[Cursor] Fix TypeScript error in Ship class

This commit fixes a TypeScript error related to PixiJS v7 type compatibility:

- Added type assertion to the addChild method call in the Ship class
- Resolves the error: "Argument of type 'Text' is not assignable to parameter of type 'DisplayObject'"
- This is a similar issue to the other PixiJS type compatibility errors we fixed earlier 

[Cursor] Fix network connection issues for local multiplayer

This commit addresses several issues related to network connectivity for local multiplayer:

1. Fixed IP address configuration:
   - Updated .env file with the correct local IP address
   - Added proper error handling for connection failures

2. Enhanced server configuration:
   - Updated Content Security Policy to allow connections from local network
   - Configured server to listen on all network interfaces
   - Added better CORS configuration for cross-origin requests

3. Improved client-side error handling:
   - Added detailed error messages for connection issues
   - Implemented better reconnection logic
   - Enhanced status display with more information

4. Added network testing tools:
   - Created a dedicated network test page
   - Added port checking utility
   - Created firewall configuration helper

5. Added firewall configuration:
   - Created batch file to add Windows Firewall rule
   - Documented network setup process

These changes enable playing the game with multiple devices on the local network,
making it possible to test the multiplayer functionality with real players.

[Cursor] Implement collision detection and ship damage system

This commit adds collision detection and a ship damage system to the game:

1. Collision Detection:
   - Added circle-based collision detection between ships
   - Implemented collision response with ships pushing each other away
   - Added visual feedback for collisions (ship flashing)
   - Collision damage based on relative speed and ship type

2. Ship Damage System:
   - Added health tracking for ships
   - Implemented damage application with visual feedback
   - Ships change appearance based on damage level (color tinting)
   - Added ship destruction when health reaches zero
   - Implemented ship respawning after destruction

3. UI Improvements:
   - Added health bar to show player ship's current health
   - Added damage indicator when player takes damage
   - Ships change color based on damage level (more red as damage increases)

4. Multiplayer Synchronization:
   - Added damage reporting to the server
   - Synchronized ship damage across all clients
   - Implemented ship destruction and respawning events
   - Server validates and broadcasts damage events

These changes make the game more interactive and add consequences to ship collisions, bringing the gameplay closer to the requirements in the specification document.

[Cursor] Fix collision detection and health bar positioning

This commit addresses two issues with the collision detection and UI:

1. Fixed Health Bar Positioning:
   - Moved the health bar to the center of the screen
   - Positioned it above the ship controls status
   - Added automatic repositioning when window is resized

2. Improved Collision Detection:
   - Fixed issue where collisions weren't being detected between ships
   - Increased collision radius for all ship types for better gameplay
   - Added visual indicator of collision radius (red circle) for debugging
   - Improved collision response with stronger push force
   - Added minimum damage on collision to ensure feedback
   - Added detailed debug logging for collision detection

3. Enhanced Ship Visuals:
   - Redesigned ship sprites using PIXI.Graphics for better performance
   - Simplified ship shapes for clearer visual identification
   - Added proper anchoring and positioning

These changes make the game more playable by ensuring collisions work properly
and improving the UI layout for better visibility of important game information.

[Cursor] Fix gameplay and UI issues

This commit addresses several gameplay and UI issues:

1. Improved Spawn Positions:
   - Increased the range of random spawn points across the entire map (0-2500 range)
   - Added random initial rotation for ships
   - Prevents immediate collisions at game start
   - Applied same improvements to ship respawning

2. Fixed Ship Orientation:
   - Redesigned ship sprites to point in the direction of movement
   - Improved ship shape with more detailed polygon design
   - Added clear front/back distinction for better visual feedback

3. Adjusted Collision Detection:
   - Reduced collision circle size to better match the ship sprite
   - Destroyer: 20px radius (was 40px)
   - Cruiser: 30px radius (was 50px)
   - Battleship: 40px radius (was 60px)

4. Fixed UI Layout:
   - Moved ship controls text down to 80px from top (was 20px)
   - Eliminated overlap between health bar and controls
   - Maintained centered alignment for better readability

These changes improve the gameplay experience by providing better initial
positioning, clearer visual feedback, and a more intuitive UI layout.

[Cursor] Fix ship orientation and movement direction

This commit fixes the ship orientation issue where ships weren't pointing in their movement direction:

1. Fixed Ship Movement Direction:
   - Updated the movement calculations to match PixiJS coordinate system
   - Changed from using sin/cos to cos/sin for proper directional movement
   - Ships now move in the direction they're pointing

2. Fixed Drift Calculations:
   - Updated drift component calculations to match the new movement system
   - Maintained the same drift behavior but with correct orientation

3. Added Detailed Comments:
   - Clarified the coordinate system and rotation conventions
   - Explained how rotation and movement direction are related

This fix ensures that ships visually point in the direction they're moving,
making the game more intuitive and easier to play.

[Cursor] Improve collision physics with realistic bounce effect

This commit enhances the collision response system with more realistic physics:

1. Improved Collision Prevention:
   - Added overlap detection and resolution to prevent ships from moving into each other
   - Ships now properly separate when they collide
   - Implemented immediate position correction to prevent clipping

2. Added Realistic Bounce Physics:
   - Implemented a light bounce effect based on physics principles
   - Bounce intensity varies based on ship mass (destroyer, cruiser, battleship)
   - Velocity changes are proportional to the collision impact
   - Head-on collisions result in more significant speed reduction

3. Enhanced Collision Response:
   - Ships now slow down after collisions
   - Added directional awareness (ships moving toward each other bounce differently)
   - Bounce effect scales with relative speed and mass
   - Maintained damage system based on collision force

These changes make ship interactions more realistic and satisfying, while
preventing the frustrating experience of ships overlapping or getting stuck
together after collisions.

[Cursor] Hide collision circle for cleaner visuals

This commit makes a simple visual improvement:

1. Hidden Collision Circle:
   - Commented out the code that draws the red collision circle
   - Collision detection still works exactly the same
   - Ships now have a cleaner visual appearance
   - Debugging visualization can be easily re-enabled if needed

This change improves the game's visual presentation while maintaining all the
collision functionality that was previously implemented.

[Cursor] Add game over screen and respawn functionality

This commit adds a game over condition and respawn system:

1. Game Over Screen:
   - Added a semi-transparent overlay when player ship is destroyed
   - Created a "SHIP DESTROYED" message with dramatic styling
   - Added a rejoin button with hover effects
   - Game controls are disabled during game over state

2. Respawn Functionality:
   - Added client-side respawn request system
   - Implemented server-side respawn handling
   - Player gets a new ship with random position and rotation
   - New ship may be a different type (destroyer, cruiser, battleship)
   - Other players are notified when a player respawns

3. Technical Improvements:
   - Added mouse position tracking and hit testing
   - Implemented button interaction with hover effects
   - Added proper cleanup and state reset on respawn
   - Ensured proper synchronization between client and server

This feature completes the ship destruction and respawn cycle, giving players
a clear indication when they've been destroyed and allowing them to rejoin
the battle with a new ship.

[Cursor] Fix TypeScript error in respawn functionality

This commit fixes a TypeScript error in the NetworkManager class:

1. Type Compatibility Issue:
   - Fixed error: "Type 'string' is not assignable to type 'ShipType'"
   - Added proper type definition for ShipType in NetworkManager.ts
   - Updated Player interface to use the ShipType type instead of string
   - Added appropriate type assertion when assigning player.type to ship.type

2. Improved Type Safety:
   - Ensured consistent type usage between Ship and NetworkManager classes
   - Maintained the string literal union type ('destroyer' | 'cruiser' | 'battleship')
   - Prevents potential runtime errors from invalid ship types

This fix ensures type safety when handling ship respawning, particularly when
the server assigns a new ship type to the player during respawn.

[Cursor] Fix TypeScript errors and enhance weapon system

This commit addresses several TypeScript errors and enhances the weapon system:

1. Fixed TypeScript Errors:
   - Updated property names from 'throttleSetting' to 'throttle' in Game.ts
   - Updated property names from 'rudderSetting' to 'rudder' in Game.ts
   - Added type assertion to fix removeChild method in Projectile.ts

2. Enhanced Weapon System:
   - Projectiles now fire toward the mouse pointer direction
   - Added maximum range limit for projectiles (500px for cannons, 700px for torpedoes)
   - Added water splash effect when projectiles expire or reach maximum range
   - Improved projectile spread pattern around the target direction

3. Technical Improvements:
   - Added distance tracking for projectiles
   - Enhanced projectile serialization for network synchronization
   - Improved visual feedback with animated water splash effects
   - Fixed world-to-screen coordinate conversion for mouse targeting

These changes make the combat system more intuitive and visually appealing,
while fixing the TypeScript errors that were preventing compilation.

[Cursor] Fix mouse-directed firing and add visual target indicator

This commit addresses issues with the mouse-directed firing system:

1. Fixed Coordinate Conversion:
   - Improved the conversion between screen and world coordinates
   - Properly calculated mouse position relative to the player ship
   - Added debug logging to track mouse positions and angles

2. Simplified Projectile Spawning:
   - Reduced complexity in the projectile spawn position calculation
   - Made projectiles spawn directly at the ship's position
   - Removed unnecessary rotation offsets for more predictable aiming

3. Added Visual Target Indicator:
   - Added a red circle that shows where the mouse is pointing in the game world
   - Helps players see exactly where their shots will go
   - Makes aiming more intuitive and predictable

4. Enhanced Debugging:
   - Added console logging for mouse positions and firing angles
   - Improved error detection for coordinate conversion issues
   - Made it easier to diagnose firing direction problems

These changes make the combat system more responsive and intuitive, ensuring
that projectiles consistently fire in the direction the player is pointing.

[Cursor] Improve mouse targeting UI and prevent context menu

This commit enhances the mouse targeting experience with two key improvements:

1. Hidden Mouse Cursor:
   - Added CSS to hide the default cursor over the game canvas
   - This prevents visual confusion between the system cursor and the game's targeting indicator
   - Makes the targeting experience cleaner and more immersive
   - The red circle target indicator now serves as the only cursor

2. Prevented Context Menu:
   - Added event listener to block the browser's context menu on right-click
   - Right mouse button can now be used exclusively for secondary weapons
   - Prevents accidental menu opening during intense gameplay
   - Improves the overall game experience on desktop browsers

These changes make the targeting system more intuitive and game-like, removing
browser UI elements that would otherwise interfere with the gameplay experience.

[Cursor] Fix TypeScript errors in event listeners

This commit addresses TypeScript errors in the GameCanvas component:

1. Fixed Event Listener Type Issues:
   - Changed MouseEvent to Event in the preventContextMenu function signature
   - This resolves the type compatibility error with the standard DOM event system
   - Removed the unnecessary return value from the event handler

2. Added Proper Type Assertions:
   - Added explicit type assertions for the PIXI.Application view property
   - Cast app.view to HTMLCanvasElement to access standard DOM methods
   - This resolves the "possibly undefined" TypeScript errors

3. Improved Code Structure:
   - Used separate variables with clear type assertions for better readability
   - Added comments explaining the type assertions
   - Maintained the same functionality while ensuring type safety

These changes fix all TypeScript errors while preserving the functionality
that hides the mouse cursor and prevents the context menu from appearing
when right-clicking in the game canvas.

[Cursor] Add enemy indicator arrow

This commit adds a helpful navigation feature to the game:

1. Enemy Indicator Arrow:
   - Added a small red arrow with white border that points to the nearest enemy
   - Arrow dynamically updates to always point toward the closest enemy ship
   - Positioned at a fixed distance from the player's ship
   - Automatically hides when no enemies are available

2. Nearest Enemy Detection:
   - Implemented algorithm to find the closest enemy ship
   - Calculates distances to all ships in real-time
   - Skips player's own ship and destroyed ships
   - Updates continuously as ships move around

3. Visual Design:
   - Created a clear, easy-to-see arrow shape
   - Used red color with white outline for visibility against the water
   - Arrow rotates smoothly to track enemy movement
   - Size and distance are balanced for good visibility without obstruction

This feature helps players locate enemies more easily, especially when they're
off-screen or difficult to spot, improving the overall gameplay experience.

[Cursor] Refine enemy indicator arrow

This commit refines the enemy indicator arrow to make it more subtle and less intrusive:

1. Reduced Size and Prominence:
   - Decreased arrow size from 15px to 8px
   - Added ENEMY_INDICATOR_SIZE constant for easier adjustments
   - Made the arrow proportionally narrower and more elegant

2. Repositioned to Screen Edge:
   - Increased distance from player ship from 100px to 250px
   - Arrow now appears closer to the edge of the screen
   - Provides directional information without cluttering the central play area

3. Improved Visual Style:
   - Reduced opacity to 70% for a more subtle appearance
   - Decreased border thickness from 1px to 0.5px
   - Applied opacity to both fill and stroke for consistency
   - Maintained red/white color scheme for visibility against the water

4. Enhanced Configurability:
   - Added dedicated constants for size, distance, and opacity
   - Made all dimensions proportional to the size constant
   - Easier to adjust and fine-tune in the future

These changes make the enemy indicator less distracting while still providing
valuable directional information to the player.

[Cursor] Remove white border from enemy indicator arrow

This commit makes a simple visual improvement to the enemy indicator arrow:

1. Removed White Border:
   - Removed the white outline/border from the enemy indicator arrow
   - Arrow is now a solid red shape with no border
   - Maintains the same size, position, and opacity settings
   - Provides a cleaner, more minimalist visual appearance

2. Simplified Drawing Code:
   - Removed the redundant lineStyle and second drawing section
   - Kept only the red fill for the arrow shape
   - Maintained the same arrow geometry and proportions
   - Added a clear comment explaining the change

This change further refines the enemy indicator to be even more subtle
while still providing clear directional information to the player.

[Cursor] Fix projectile firing issues and add error handling

This commit addresses an issue where projectiles sometimes don't spawn despite the flash effect being shown:

1. Enhanced Error Handling:
   - Added try-catch blocks around critical projectile creation and update code
   - Added detailed error logging to help diagnose issues
   - Implemented graceful failure handling to prevent game crashes
   - Added null checks for projectile sprites before accessing properties

2. Fixed Projectile Creation:
   - Added verification that projectile sprite is properly created before adding to container
   - Implemented fallback sprite creation if the normal sprite creation fails
   - Added debug logging to track successful projectile creation
   - Ensured projectiles are always properly removed from the game when they expire

3. Improved Projectile Lifecycle Management:
   - Added checks for undefined projectiles in the update loop
   - Ensured projectiles are always removed from the array even if cleanup fails
   - Added separate error handling for projectile creation and cleanup phases
   - Fixed potential memory leaks by ensuring proper cleanup

These changes make the weapon system more robust and reliable, ensuring that
projectiles are consistently created and displayed when weapons are fired.

[Cursor] Fix weapon firing issues at game start

This commit addresses an issue where weapons couldn't be fired immediately after the game started:

1. Fixed Weapon Initialization:
   - Explicitly initialized weapon cooldowns to 0 in the Ship constructor
   - Added debug logging to weapon firing methods to help diagnose issues
   - Added comprehensive error checking in the firePlayerWeapon function
   - Added detailed logging of weapon state and firing attempts

2. Improved Mouse Position Handling:
   - Initialized mouse position to the center of the screen by default
   - Added fallback for cases where mouse position isn't properly set
   - Added validation to prevent errors when mouse position is unavailable
   - Added logging of mouse position during weapon firing

3. Enhanced Error Handling:
   - Added null checks for playerShip and weaponProps
   - Added detailed error messages for debugging
   - Added logging for cases where weapons couldn't be fired
   - Improved error reporting for failed projectile creation

These changes ensure that weapons can be fired immediately when the game starts,
without requiring the player to perform maneuvers first. The additional logging
and error handling also make it easier to diagnose any future issues with the
weapon system.

[Cursor] Fix weapon firing issues related to ship direction and angle

This commit addresses issues with projectile firing related to ship direction and angle:

1. Improved Projectile Spawn Positions:
   - Completely redesigned the getProjectileSpawnPosition method in Ship class
   - Added proper offset calculations based on ship type and weapon type
   - Implemented multi-cannon positioning for ships with multiple weapons
   - Added lateral offsets for multi-projectile weapons (spread cannons/torpedoes)
   - Added detailed logging of spawn positions for debugging

2. Enhanced Angle Calculation:
   - Fixed angle calculation in firePlayerWeapon function
   - Added more detailed logging of ship rotation and firing angles
   - Ensured consistent angle handling between ship rotation and projectile direction
   - Improved spread calculation for multi-projectile weapons
   - Added angle information to projectile creation logs

3. Fixed Projectile Movement:
   - Enhanced the Projectile update method to ensure correct movement
   - Added detailed movement logging for the first few frames
   - Improved torpedo projectile visuals by rotating sprites to match movement
   - Added clear comments explaining the coordinate system and rotation conventions
   - Fixed potential issues with projectile trajectory calculation

These changes ensure that projectiles fire correctly regardless of ship direction,
and that the firing angle properly corresponds to the mouse position. The improved
spawn positions also make multi-cannon ships more visually appealing and realistic.

[Cursor] Fix "app.ticker is null" error in createFiringEffect

This commit addresses a critical error that occurs when projectiles are received from the network:

1. Fixed createFiringEffect Function:
   - Added robust error handling with try-catch blocks
   - Implemented a fallback animation mechanism using setTimeout when app.ticker is null
   - Added null checks for flash.parent before removing children
   - Added detailed error logging to help diagnose issues
   - Made the function more resilient to edge cases

2. Enhanced Network Projectile Handling:
   - Added try-catch blocks around the NetworkManager's projectile callback
   - Added verification that projectile sprite exists before adding to container
   - Improved error reporting for network projectile handling
   - Added success logging for better debugging
   - Made the callback more resilient to unexpected states

3. Improved Error Recovery:
   - The game now gracefully handles the case when app.ticker is null
   - Visual effects still work even when the primary animation system is unavailable
   - Prevents cascading errors that could crash the game
   - Maintains visual feedback for network projectiles

These changes ensure that projectiles received from other players are properly
displayed and animated, even in edge cases where the PIXI.js ticker might not be
fully initialized or available.

[Cursor] Add mobile touch controls for better gameplay on mobile devices

This commit adds comprehensive touch controls for mobile devices, making the game
playable on smartphones and tablets:

1. Mobile Device Detection:
   - Added device detection based on user agent and screen size
   - Automatically shows touch controls when on mobile devices
   - Maintains keyboard/mouse controls on desktop devices
   - Provides responsive layout for different screen sizes and orientations

2. Touch Input System:
   - Enhanced InputHandler class with touch event support
   - Added virtual button system for mobile controls
   - Implemented touch position tracking for aiming
   - Ensured proper event handling with preventDefault to avoid browser gestures

3. Mobile UI Controls:
   - Created dedicated MobileControls React component
   - Added intuitive touch controls for ship movement (throttle and rudder)
   - Added weapon firing buttons for primary and secondary weapons
   - Implemented visual feedback for button presses
   - Positioned controls for easy thumb access on both portrait and landscape orientations

4. Responsive Design:
   - Added media queries for different screen sizes and orientations
   - Optimized button sizes and positions for various devices
   - Ensured controls remain usable in landscape mode
   - Added semi-transparent styling to avoid obscuring the game view

5. Game Integration:
   - Updated Game.ts to handle virtual button inputs
   - Modified ship control logic to work with touch inputs
   - Ensured aiming works correctly with touch positions
   - Maintained compatibility with existing keyboard/mouse controls

These changes make the game fully playable on mobile devices in the local network,
allowing players to join battles from their smartphones and tablets.

[Cursor] Fix mobile controls visibility and touch handling

This commit addresses issues with mobile controls not being visible or functional on mobile devices:

1. Improved Mobile Detection:
   - Enhanced device detection algorithm with multiple checks
   - Added user agent pattern matching for more reliable detection
   - Added touch screen capability detection
   - Added screen size detection with more appropriate thresholds
   - Added detailed logging of detection results for debugging

2. Fixed CSS Visibility Issues:
   - Increased z-index values to ensure controls appear above game elements
   - Made buttons larger and more visible with stronger colors
   - Added drop shadows for better contrast against game background
   - Increased border thickness and opacity for better visibility
   - Improved text readability with larger font sizes and text shadows

3. Enhanced Touch Event Handling:
   - Added { passive: false } option to touch event listeners
   - Added mouse event handlers for testing on desktop
   - Added comprehensive logging for touch/mouse events
   - Fixed event propagation issues with proper preventDefault() calls
   - Added visual feedback for button presses with stronger active states

4. Added Debug Information:
   - Added development-only debug overlay showing device information
   - Added console logging throughout the mobile controls lifecycle
   - Added detailed logging of component mounting and event binding
   - Added reference validation to catch potential null references
   - Improved error handling with descriptive warning messages

These changes ensure that mobile controls are properly displayed and functional
on mobile devices, making the game fully playable on smartphones and tablets
in the local network.

[Cursor] Fix spawn position issues and add spawn protection

This commit addresses issues with player ships spawning too close to each other, 
particularly noticeable on mobile devices:

1. Improved Spawn Position Logic:
   - Added getSafeSpawnPosition function on the server to find safe spawn locations
   - Implemented minimum safe distance (300 units) between spawning ships
   - Added fallback to corner positions if no safe position can be found
   - Kept ships away from world edges to prevent spawning in corners
   - Added detailed logging of spawn positions for debugging

2. Added Spawn Protection:
   - Implemented 3-second spawn protection period for all ships
   - Prevented collisions between ships during spawn protection
   - Added spawn protection timer that resets on respawn
   - Added protection for both ships in a potential collision
   - Added logging of spawn protection activation and expiration

3. Improved Client-Server Synchronization:
   - Updated client to properly handle initial position from server
   - Fixed position synchronization in the gameState event handler
   - Added proper position handling in respawnAccepted event
   - Ensured spawn protection is reset when ships respawn
   - Added consistent position logging across client and server

4. Enhanced Mobile Experience:
   - Fixed specific issues affecting iPad and other mobile devices
   - Prevented immediate collisions on game start
   - Improved initial camera positioning for better orientation
   - Added more detailed debug information for mobile devices
   - Maintained compatibility with existing touch controls

These changes ensure that players have a better experience when joining the game,
especially on mobile devices, by preventing frustrating collisions immediately
after spawning and providing time to orient themselves before becoming vulnerable.

[Cursor] Implement device connection management and inactive player cleanup

This commit adds robust device connection management to ensure only one active connection per device and implements automatic cleanup of inactive players:

1. Device Connection Management:
   - Added device ID tracking using localStorage on the client
   - Implemented device identification on connection
   - Added logic to detect and handle multiple connections from the same device
   - Force disconnection of previous sessions when a new one connects
   - Alert users when they're disconnected due to a new session

2. Inactive Player Cleanup:
   - Added timestamp tracking for all player activities
   - Implemented a heartbeat system to keep connections alive
   - Added periodic cleanup of players inactive for more than 5 minutes
   - Properly removed device connections when players disconnect

3. Technical Improvements:
   - Refactored connection handling for better reliability
   - Added detailed logging for connection events
   - Improved error handling for socket connections
   - Used UUID for more reliable device identification
   - Added proper cleanup of resources on disconnection

These changes ensure that only active players remain in the game, preventing "ghost" players and improving overall game performance and user experience.

[Cursor] Fix multiplayer synchronization and collision detection

This commit addresses several critical issues with the multiplayer functionality:

1. Fixed position synchronization between clients:
   - Enhanced playerMoved event handler to explicitly update sprite positions
   - Increased position update frequency for smoother movement
   - Added detailed logging for position updates

2. Improved collision detection:
   - Enhanced projectile collision detection with larger hit boxes
   - Fixed damage reporting and handling between clients
   - Added comprehensive error handling for network events

3. Added debugging tools:
   - Created debug functions for testing collision and damage
   - Added detailed logging throughout the networking code
   - Enhanced the debug button to run all diagnostic tests

These changes ensure that player positions are properly synchronized and
projectiles correctly generate hit events when colliding with ships. 